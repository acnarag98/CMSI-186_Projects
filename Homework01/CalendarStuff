/**
 *  File name     :  CalendarStuff.java
 *  Purpose       :  Provides a class with supporting methods for CountTheDays.java program
 *  Author        :  B.J. Johnson (prototype)
 *  Date          :  2017-01-02 (prototype)
 *  Author        :  <your Andrew Narag>
 *  Date          :  <date 1_18_18>
 *  Description   :  This file provides the supporting methods for the CountTheDays program which will
 *                   calculate the number of days between two dates.  It shows the use of modularization
 *                   when writing Java code, and how the Java compiler can "figure things out" on its
 *                   own at "compile time".  It also provides examples of proper documentation, and uses
 *                   the source file header template as specified in the "Greeter.java" template program
 *                   file for use in CMSI 186, Spring 2017.
 *  Notes         :  None
 *  Warnings      :  None
 *  Exceptions    :  None
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  Revision History
 *  ----------------
 *            Rev      Date     Modified by:  Reason for change/modification
 *           -----  ----------  ------------  -----------------------------------------------------------
 *  @version 1.0.0  2017-01-02  B.J. Johnson  Initial writing and release
 *  @version 1.0.1  2017-12-25  B.J. Johnson  Updated for Spring 2018
 */
public class CalendarStuff {

  /**
   * A listing of the days of the week, assigning numbers; Note that the week arbitrarily starts on Sunday
   */
   private static final int SUNDAY    = 1;
   private static final int MONDAY    = SUNDAY + 1;
   private static final int TUESDAY    = MONDAY + 1;
   private static final int WEDNESDAY     = TUESDAY + 1;
   private static final int THURSDAY     = WEDNESDAY + 1;
   private static final int FRIDAY     = THURSDAY + 1;
   private static final int SATURDAY     = FRIDAY + 1;
  // you can finish the rest on your own
  
  /**
   * A listing of the months of the year, assigning numbers; I suppose these could be ENUMs instead, but whatever
   */
   private static final int JANUARY    = 1;
   private static final int FEBRUARY   = JANUARY + 1;
   private static final int MARCH    = FEBRUARY + 1;
   private static final int APRIL    = MARCH + 1;
   private static final int MAY    = APRIL + 1;
   private static final int JUNE    = MAY + 1;
   private static final int JULY    = JUNE + 1;
   private static final int AUGUST    = JULY + 1;
   private static final int SEPTEMBER    = AUGUST + 1;
   private static final int OCTOBER    = SEPTEMBER + 1;
   private static final int NOVEMBER    = OCTOBER + 1;
   private static final int DECEMBER    = NOVEMBER + 1;

  // you can finish these on your own, too
  
  /**
   * An array containing the number of days in each month
   *  NOTE: this excludes leap years, so those will be handled as special cases
   *  NOTE: this is optional, but suggested
   */
   private static int[]    days        = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

  /**
   * The constructor for the class
   */
   public CalendarStuff() {
      System.out.println( "Constructor called..." );  // replace this with the actual code
   }

  /**
   * A method to determine if the year argument is a leap year or not<br />
   *  Leap years are every four years, except for even-hundred years, except for every 400
   * @param    year  long containing four-digit year
   * @return         boolean which is true if the parameter is a leap year
   */
   public static boolean isLeapYear( long year ) {
    if (year % 400==0){
      return true;  // replace this with the actual code
    }else if(year % 4==0 && year % 100 != 0){
      return true;
    }else{
      return false;
    }
   }

  /**
   * A method to calculate the days in a month, including leap years
   * @param    month long containing month number, starting with "1" for "January"
   * @param    year  long containing four-digit year; required to handle Feb 29th
   * @return         long containing number of days in referenced month of the year
   * notes: remember that the month variable is used as an indix, and so must
   *         be decremented to make the appropriate index value
   */
   public static long daysInMonth( long month, long year ) {
    if (month == JANUARY|| month == MARCH || month == MAY || month == JULY || month == AUGUST || month == OCTOBER || month == DECEMBER){
      return 31;
    }else if(month == APRIL || month == JUNE || month == SEPTEMBER || month == NOVEMBER){
      return 30;
    }else if (month == FEBRUARY){
      if (year % 400==0){
        return 29;
      }else if(year % 4==0 && year % 100 != 0){
        return 29;
      }else{
        return 28;
      }
    }
    return 0;
   }

  /**
   * A method to determine if two dates are exactly equal
   * @param    month1 long    containing month number, starting with "1" for "January"
   * @param    day1   long    containing day number
   * @param    year1  long    containing four-digit year
   * @param    month2 long    containing month number, starting with "1" for "January"
   * @param    day2   long    containing day number
   * @param    year2  long    containing four-digit year
   * @return          boolean which is true if the two dates are exactly the same
   */
   public static boolean dateEquals( long month1, long day1, long year1, long month2, long day2, long year2 ) {
    if (CalendarStuff.isValidDate(month1,day1,year1) == true && CalendarStuff.isValidDate(month2,day2,year2) == true){
      if (month1 == month2 && day1 == day2 && year1 == year2){
        return true;
      }else{
        return false;
      }
    }else{
      return false;
    }
   }

  /**
   * A method to compare the ordering of two dates
   * @param    month1 long   containing month number, starting with "1" for "January"
   * @param    day1   long   containing day number
   * @param    year1  long   containing four-digit year
   * @param    month2 long   containing month number, starting with "1" for "January"
   * @param    day2   long   containing day number
   * @param    year2  long   containing four-digit year
   * @return          int    -1/0/+1 if first date is less than/equal to/greater than second
   */
   public static int compareDate( long month1, long day1, long year1, long month2, long day2, long year2 ) {
    if (CalendarStuff.isValidDate(month1,day1,year1) == true && CalendarStuff.isValidDate(month2,day2,year2) == true){
      if (year1 > year2 || year1 == year2 && month1 > month2 || year1 == year2 && month1 == month2 && day1 > day2){
        return 1;
      }else if (year1 == year2 && month1 == month2 && day1 == day2){
        return 0;
      }else{
        return -1;
      }
    }else{
      return 10;
    }
   }

  /**
   * A method to return whether a date is a valid date
   * @param    month long    containing month number, starting with "1" for "January"
   * @param    day   long    containing day number
   * @param    year  long    containing four-digit year
   * @return         boolean which is true if the date is valid
   * notes: remember that the month and day variables are used as indices, and so must
   *         be decremented to make the appropriate index value
   */
   public static boolean isValidDate( long month, long day, long year ) {
    int leap = 0; //keeps track of whether or not year is a leap year (1) or not a leap year (0)
    if(month >= 1 && month <= 12 && day >= 1 && year >= 0){


      if ((month == JANUARY|| month == MARCH || month == MAY || month == JULY || month == AUGUST || month == OCTOBER || month == DECEMBER) && day <= 31){
        return true;


      }else if ((month == APRIL || month == JUNE || month == SEPTEMBER || month == NOVEMBER) && day <= 30){
        return true;


      }else if (month == FEBRUARY && day <= 29){
        if (year % 400==0){
          leap = 1;
        }else if (year % 4==0 && year % 100 != 0){
          leap = 1;
        }else{
          leap = 0;
        }
        if (day == 29 && leap == 0){
          return false;
        }else{
          return true;
        }
      }


    }else{
      return false;
    }
    return false;
  }

  /**
   * A method to return a string version of the month name
   * @param    month long   containing month number, starting with "1" for "January"
   * @return         String containing the string value of the month (no spaces)
   */
   public static String toMonthString( int month ) {
    String monthstring;
      switch( month ) {
        case 1: monthstring = "January";
          break;
        case 2: monthstring = "February";
          break;
        case 3: monthstring = "March";
          break;
        case 4: monthstring = "April";
          break;
        case 5: monthstring = "May";
          break;
        case 6: monthstring = "June";
          break;
        case 7: monthstring = "July";
          break;
        case 8: monthstring = "August";
          break;
        case 9: monthstring = "September";
          break;
        case 10: monthstring = "October";
          break;
        case 11: monthstring = "November";
          break;
        case 12: monthstring = "December";
          break;
         default: throw new IllegalArgumentException( "Illegal month value given to 'toMonthString()'." );
      }
      return monthstring;
   }

  /**
   * A method to return a string version of the day of the week name
   * @param    day int    containing day number, starting with "1" for "Sunday"
   * @return       String containing the string value of the day (no spaces)
   */
   public static String toDayOfWeekString( int day ) {
    String daystring;
      switch( day ) {
        case 1: daystring = "Sunday";
          break;
        case 2: daystring = "Monday";
          break;
        case 3: daystring = "Tuesday";
          break;
        case 4: daystring = "Wednesday";
          break;
        case 5: daystring = "Thursday";
          break;
        case 6: daystring = "Friday";
          break;
        case 7: daystring = "Saturday";
          break;

         default       : throw new IllegalArgumentException( "Illegal day value given to 'toDayOfWeekString()'." );
      }
      return daystring;
   }

  /**
   * A method to return a count of the total number of days between two valid dates
   * @param    month1 long   containing month number, starting with "1" for "January"
   * @param    day1   long   containing day number
   * @param    year1  long   containing four-digit year
   * @param    month2 long   containing month number, starting with "1" for "January"
   * @param    day2   long   containing day number
   * @param    year2  long   containing four-digit year
   * @return          long   count of total number of days
   */
   public static long daysBetween( long month1, long day1, long year1, long month2, long day2, long year2 ) {
      long dayCount = 0;
      long yearsBetween;
      long earlierYear;
    if (year1 > year2){
      yearsBetween = year1-year2;
      earlierYear = year2;
    }else if (year2 > year1){
      yearsBetween = year2-year1;
      earlierYear = year1;
    }else{
      yearsBetween = 0;
      earlierYear = 0;
    }


    if (CalendarStuff.isValidDate(month1, day1, year1) == true && CalendarStuff.isValidDate(month2, day2, year2) == true){
        for (long i = earlierYear + 1; i < earlierYear + yearsBetween; i++){
            dayCount += 365;
          if (CalendarStuff.isLeapYear(i) == true){
            dayCount += 1;
          }else{
            dayCount += 0;
          }
        }

      if (earlierYear == year1){
        if (month1 ==1){
          dayCount += (365-day1);
        }else if (month1 == 2){
          dayCount += (365-31- day1);
        }else if (month1 == 3){
          dayCount += (365-31-28-day1);
        }else if (month1 == 4){
          dayCount += (365-31-28-31-day1);
        }else if (month1 == 5){
          dayCount += (365-31-28-31-30-day1);
        }else if (month1 == 6){
          dayCount += (365-31-28-31-30-31-day1);
        }else if (month1 == 7){
          dayCount += (365-31-28-31-30-31-30-day1);
        }else if (month1 == 8){
          dayCount += (365-31-28-31-30-31-30-31-day1);
        }else if (month1 == 9){
          dayCount += (365-31-28-31-30-31-30-31-31-day1);
        }else if (month1 == 10){
          dayCount += (365-31-28-31-30-31-30-31-31-30-day1);
        }else if (month1 == 11){
          dayCount += (365-31-28-31-30-31-30-31-31-30-31-day1);
        }else{
          dayCount += (365-31-28-31-30-31-30-31-31-30-31-30-day1);
        }
        if (CalendarStuff.isLeapYear(year1)==true && (month1<=2 || month1==2 && day1==29)){
          dayCount += 1;
        }else{
          dayCount += 0;
        }
        if (month2==1){
          dayCount += day2;
        }else if (month2==2){
          dayCount += (31+day2);
        }else if (month2==3){
          dayCount += (31+28+day2);
        }else if (month2==4){
          dayCount += (31+28+31+day2);
        }else if (month2==5){
          dayCount += (31+28+31+30+day2);
        }else if (month2==6){
          dayCount += (31+28+31+30+31+day2);
        }else if (month2==7){
          dayCount += (31+28+31+30+31+30+day2);
        }else if (month2==8){
          dayCount += (31+28+31+30+31+30+31+day2);
        }else if (month2==9){
          dayCount += (31+28+31+30+31+30+31+31+day2);
        }else if (month2==10){
          dayCount += (31+28+31+30+31+30+31+31+30+day2);
        }else if (month2==11){
          dayCount += (31+28+31+30+31+30+31+31+30+31+day2);
        }else{
          dayCount += (31+28+31+30+31+30+31+31+30+31+30+day2);
        }
        if (CalendarStuff.isLeapYear(year2)==true && month2>=3){
          dayCount += 1;
        }else{
          dayCount += 0;
        }



      }else if (earlierYear == year2){
        if (month2 ==1){
          dayCount += (365-day2);
        }else if (month2 == 2){
          dayCount += (365-31- day2);
        }else if (month2 == 3){
          dayCount += (365-31-28-day2);
        }else if (month2 == 4){
          dayCount += (365-31-28-31-day2);
        }else if (month2 == 5){
          dayCount += (365-31-28-31-30-day2);
        }else if (month2 == 6){
          dayCount += (365-31-28-31-30-31-day2);
        }else if (month2 == 7){
          dayCount += (365-31-28-31-30-31-30-day2);
        }else if (month2 == 8){
          dayCount += (365-31-28-31-30-31-30-31-day2);
        }else if (month2 == 9){
          dayCount += (365-31-28-31-30-31-30-31-31-day2);
        }else if (month2 == 10){
          dayCount += (365-31-28-31-30-31-30-31-31-30-day2);
        }else if (month2 == 11){
          dayCount += (365-31-28-31-30-31-30-31-31-30-31-day2);
        }else{
          dayCount += (365-31-28-31-30-31-30-31-31-30-31-30-day2);
        }
        if (CalendarStuff.isLeapYear(year2)==true && (month2<=2 || month2==2 && day2==29)){
          dayCount += 1;
        }else{
          dayCount += 0;
        }
        if (month1==1){
          dayCount += day1;
        }else if (month1==2){
          dayCount += (31+day1);
        }else if (month1==3){
          dayCount += (31+28+day1);
        }else if (month1==4){
          dayCount += (31+28+31+day1);
        }else if (month1==5){
          dayCount += (31+28+31+30+day1);
        }else if (month1==6){
          dayCount += (31+28+31+30+31+day1);
        }else if (month1==7){
          dayCount += (31+28+31+30+31+30+day1);
        }else if (month1==8){
          dayCount += (31+28+31+30+31+30+31+day1);
        }else if (month1==9){
          dayCount += (31+28+31+30+31+30+31+31+day1);
        }else if (month1==10){
          dayCount += (31+28+31+30+31+30+31+31+30+day1);
        }else if (month1==11){
          dayCount += (31+28+31+30+31+30+31+31+30+31+day1);
        }else{
          dayCount += (31+28+31+30+31+30+31+31+30+31+30+day1);
        }
        if (CalendarStuff.isLeapYear(year1)==true && month1>=3){
          dayCount += 1;
        }else{
          dayCount += 0;
        }



      }else{
        long firstDays;
        long secondDays;
        if (month1 == 1){
          firstDays = day1;
        }else if (month1 == 2){
          firstDays = 31+day1;
        }else if (month1 == 3){
          firstDays = 31+28+day1;
        }else if (month1 == 4){
          firstDays = 31+28+31+day1;
        }else if (month1 == 5){
          firstDays = 31+28+31+30+day1;
        }else if (month1 == 6){
          firstDays = 31+28+31+30+31+day1;
        }else if (month1 == 7){
          firstDays = 31+28+31+30+31+30+day1;
        }else if (month1 == 8){
          firstDays = 31+28+31+30+31+30+31+day1;
        }else if (month1 == 9){
          firstDays = 31+28+31+30+31+30+31+31+day1;
        }else if (month1 == 10){
          firstDays = 31+28+31+30+31+30+31+31+30+day1;
        }else if (month1 == 11){
          firstDays = 31+28+31+30+31+30+31+31+30+31+day1;
        }else{
          firstDays = 31+28+31+30+31+30+31+31+30+31+30+day1;
        }
        if (CalendarStuff.isLeapYear(year1)==true && month1>=3){
          firstDays += 1;
        }else{
          firstDays += 0;
        }
        if (month2 == 1){
          secondDays = day2;
        }else if (month2 == 2){
          secondDays = 31+day2;
        }else if (month2 == 3){
          secondDays = 31+28+day2;
        }else if (month2 == 4){
          secondDays = 31+28+31+day2;
        }else if (month2 == 5){
          secondDays = 31+28+31+30+day2;
        }else if (month2 == 6){
          secondDays = 31+28+31+30+31+day2;
        }else if (month2 == 7){
          secondDays = 31+28+31+30+31+30+day2;
        }else if (month2 == 8){
          secondDays = 31+28+31+30+31+30+31+day2;
        }else if (month2 == 9){
          secondDays = 31+28+31+30+31+30+31+31+day2;
        }else if (month2 == 10){
          secondDays = 31+28+31+30+31+30+31+31+30+day2;
        }else if (month2 == 11){
          secondDays = 31+28+31+30+31+30+31+31+30+31+day2;
        }else{
          secondDays = 31+28+31+30+31+30+31+31+30+31+30+day2;
        }
        if (CalendarStuff.isLeapYear(year2)==true && month2>=3){
          secondDays += 1;
        }else{
          secondDays += 0;
        }
        dayCount = Math.abs(firstDays - secondDays);

      }
    }
    return dayCount;
  }


}

